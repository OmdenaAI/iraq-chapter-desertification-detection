{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Downloading NDVI values from google earth engine",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "haKwW0GsFIZ-"
      },
      "outputs": [],
      "source": [
        "\"\"\"  \n",
        "reference to codes at  \n",
        "https://code.earthengine.google.com/?accept_repo=users%2Fujavalgandhi%2FEnd-to-End-Projects\n",
        "\n",
        "\n",
        "\n",
        "Note:      \n",
        "\n",
        "the following is the javascript code used in google earth engine for downloading selected locations and time intervals.\n",
        "\n",
        "calculate annual means inside google earth engine will reduce file sizes and make downloading process easier.   \n",
        "\n",
        "\"\"\"\n",
        "\n",
        "\n",
        "Var roi: Table projects/ee-letustry/assets/location1    # selecting ROI (Region of interest) and uploading shapefile.       \n",
        "\n",
        "var modis = ee.ImageCollection(\"MODIS/006/MOD13Q1\");\t# Modis dataset of NDVI\n",
        "\n",
        "var filtered = modis\n",
        "  .filter(ee.Filter.date('2002-01-01', '2021-12-31'))     # selecting time interval\n",
        "\n",
        "\n",
        "var modisNDVI = filtered.select('NDVI')\n",
        "var scaledNDVI = modisNDVI.map(function(image){\n",
        "  return image.multiply(0.0001)\n",
        "  .copyProperties(image,['system:time_start','system:time_end']);\n",
        "});\n",
        "\n",
        "\n",
        "var triplets = scaledNDVI.map(function(image) {\n",
        "  var withStats = image.reduceRegions({\n",
        "  collection: roi,\n",
        "  reducer: ee.Reducer.mean().setOutputs(['ndvi']),\n",
        "  scale: 250\n",
        "  }).map(function(feature) {\n",
        "    return feature.set('imageId', image.id())\n",
        "  })\n",
        "  return withStats\n",
        "}).flatten()\n",
        "\n",
        "var format = function(table, rowId, colId) {\n",
        "  var rows = table.distinct(rowId); \n",
        "  var joined = ee.Join.saveAll('matches').apply({\n",
        "    primary: rows, \n",
        "    secondary: table, \n",
        "    condition: ee.Filter.equals({\n",
        "      leftField: rowId, \n",
        "      rightField: rowId\n",
        "    })\n",
        "  });\n",
        "         \n",
        "  return joined.map(function(row) {\n",
        "      var values = ee.List(row.get('matches'))\n",
        "        .map(function(feature) {\n",
        "          feature = ee.Feature(feature);\n",
        "          var ndvi = ee.List([feature.get('ndvi'), -9999])\n",
        "            .reduce(ee.Reducer.firstNonNull())\n",
        "          return [feature.get(colId), ee.Number(ndvi).format('%.2f')];\n",
        "        });\n",
        "      return row.select([rowId]).set(ee.Dictionary(values.flatten()));\n",
        "    });\n",
        "};\n",
        "// loc\n",
        "var timeSeriesResults = format(triplets, 'loc', 'imageId');\n",
        "print(timeSeriesResults.first()) \n",
        "\n",
        "\n",
        "Export.table.toDrive({\n",
        "  collection: timeSeriesResults,\n",
        "  description: 'MODIS_NDVI_Series',\n",
        "  folder: 'earthengine',\n",
        "  fileNamePrefix: 'modis_ndvi_series',\n",
        "  fileFormat: 'CSV'})\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    }
  ]
}
